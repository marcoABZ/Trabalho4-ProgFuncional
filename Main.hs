{-- 1. Escreva  uma  fun√ß√£o  chamada  fatorialn  que  usando  o  operador  range  e  a  fun√ß√£o  foldr devolva o fatorial de n. --}
fatorialln :: Int -> Int
fatorialln x = foldr (*) 1 [1..x]

{-- 2. Usando a fun√ß√£o map escreva uma fun√ß√£o, chamada quadradoReal que recebe uma lista de n√∫meros reais, positivos e negativos e devolva uma lista com o quadrado de cada um dos reais listados. --}
quadrado :: Double -> Double
quadrado x = x * x

quadradoReal :: [Double] -> [Double]
quadradoReal = map quadrado

{-- 3. Usando a fun√ß√£o map escreva uma fun√ß√£o, comprimentoPalavras que recebe uma lista de palavras e devolve uma lista com o comprimento de cada uma destas palavras. ---} 
comprimentoPalavra :: String -> Int
comprimentoPalavra "" = 0
comprimentoPalavra (x:y) = 1 + comprimentoPalavra y

comprimentoPalavras :: [String] -> [Int]
comprimentoPalavras = map comprimentoPalavra

{-- 4. Usando a fun√ß√£o filter escreva uma fun√ß√£o, chamada maiorMultiploDe29 devolva o maior n√∫mero entre 0 e 100000 que seja divisivel por 29. --}
multiploDe29 :: Int -> Bool
multiploDe29 x = x `mod` 29 == 0

maiorMultiploDe29 :: Int
maiorMultiploDe29 = last (filter multiploDe29 [1..100000])


{-- 5. Usando  a  fun√ß√£o  filter  escreva  uma  fun√ß√£o,  chamada  maiorMultiploDe que  recebe  um inteiro e devolva o maior n√∫mero entre 0 e 100000 que seja divisivel por este inteiro. --}
--maiorMultiploDe :: Int -> Int
--maiorMultiploDe x = last (filter  [1..10000])



{-- 6. Usando Haskell e a fun√ß√£o foldr defina uma fun√ß√£o, chamada somaQuadrados que devolva a soma dos quadrados dos itens de uma lista de n√∫meros naturais de comprimento n. De tal forma que: ùë†ùëúùëöùëéùëÑùë¢ùëéùëëùëüùëéùëëùëúùë†=12 +22 +32 +42...+ùëõ2. --}
somaDeQuadrados :: Int -> Int
somaDeQuadrados n = foldr (+) 0 [ x*x | x <- [1..n]]

{-- 7. Usando Haskell e a fun√ß√£o foldl defina uma fun√ß√£o, chamada comprimento, que devolva o comprimento (cardinalidade) de uma lista dada. --}
retorna1 :: a -> Int
retorna1 x = 1

comprimento :: [a] -> Int
comprimento x = foldr (+) 0 (map retorna1 x)

{-- 8. Esta √© uma tarefa de pesquisa: voc√™ deve encontrar e executar exemplos em Haskell do uso das seguintes fun√ß√µes dispon√≠veis no Prelude: flip, ord, max, min, curry, uncurry. Para cada uma destas fun√ß√µes voc√™ dever√° encontrar, executar e testar no m√≠nimo dois exemplos. --}

main = do
  putStrLn ("Func. 1: entrada: 4; resultado: " ++ show(fatorialln 4))
  putStrLn ("Func. 2: entrada: [-3.5, -2, 0, 3, 4.1]; resultado: " ++ show(quadradoReal [-3.5, -2, 0, 3, 4.1]))
  putStrLn ("Func. 3: entrada: ['', 'a', 'abc']; resultado: " ++ show(comprimentoPalavras ["", "a", "abc"]))
  putStrLn ("Func. 4: entrada: NA; resultado: " ++ show(maiorMultiploDe29))
  --putStrLn ("Func. 5: entrada: 5; resultado: " ++ show(maiorMultiploDe 5))
  putStrLn ("Func. 6: entrada: 7; resultado: " ++ show(somaDeQuadrados 7))
  putStrLn ("Func. 7: entrada: [1,2,3,4]; resultado: " ++ show(comprimento [1,2,3,4]))